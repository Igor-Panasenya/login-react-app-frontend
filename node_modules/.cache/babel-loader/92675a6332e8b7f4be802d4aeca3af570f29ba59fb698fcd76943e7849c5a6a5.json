{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n// axios.defaults.baseURL = 'http://localhost:8000';\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n// Make API Requests\n\n// To get username from Token\nexport async function getUsername() {\n  const token = localStorage.getItem('token');\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  let decode = jwt_decode(token);\n  return decode;\n}\n\n// authenticate function\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/api/auth', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\n\n// get user details\nexport async function getUser(_ref) {\n  let {\n    username\n  } = _ref;\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password doesn't Match...!\"\n    };\n  }\n}\n\n// register user function\nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        message\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n    console.log('status:', status);\n\n    // send email\n    if (status === 201) {\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text: message\n      });\n    }\n    return Promise.resolve(message);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n// login function\nexport async function verifyPassword(_ref2) {\n  let {\n    username,\n    password\n  } = _ref2;\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password doesn't Match...!\"\n    });\n  }\n}\n\n// update user function\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/api/updateuser', response, {\n      headers: {\n        \"Authorization\": `Beare ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't Update Profile...!\"\n    });\n  }\n}\n\n// generate OTP\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recovery password.`;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n// verify OTP\nexport async function verifyOTP(_ref3) {\n  let {\n    username,\n    code\n  } = _ref3;\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n// reset password\nexport async function resetPassword(_ref4) {\n  let {\n    username,\n    password\n  } = _ref4;\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwt_decode","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","data","get","registerUser","credentials","message","status","email","console","log","userEmail","text","resolve","verifyPassword","password","updateUser","response","put","headers","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["D:/09 Programming/02 Trayning/08 Backend/login_react_app/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\n// axios.defaults.baseURL = 'http://localhost:8000';\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\r\n// Make API Requests\r\n\r\n\r\n// To get username from Token\r\nexport async function getUsername(){\r\n    const token = localStorage.getItem('token')\r\n    if (!token) return Promise.reject(\"Cannot find Token\");\r\n    let decode = jwt_decode(token);\r\n    return decode\r\n}\r\n\r\n// authenticate function\r\nexport async function authenticate(username) {\r\n\r\n    try {\r\n        return await axios.post('/api/auth', { username });\r\n    } catch (error) {\r\n        return { error: \"Username doesn't exist...!\"}\r\n    }\r\n}\r\n\r\n// get user details\r\nexport async function getUser({ username }) {\r\n    try {\r\n        const { data } = await axios.get(`/api/user/${username}`);\r\n        return { data };\r\n    } catch (error) {\r\n        return { error: \"Password doesn't Match...!\"}\r\n    }\r\n}\r\n\r\n// register user function\r\nexport async function registerUser(credentials) {\r\n\r\n    try {\r\n        const { data : { message }, status } = await axios.post(`/api/register`, credentials);\r\n        let { username, email } = credentials;\r\n\r\n        console.log('status:', status);\r\n\r\n        // send email\r\n        if (status === 201) {\r\n            await axios.post('/api/registerMail', { username, userEmail : email, text: message });\r\n        }\r\n\r\n        return Promise.resolve(message);\r\n\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\n// login function\r\nexport async function verifyPassword({ username, password }) {\r\n    try {\r\n        if (username) {\r\n            const { data } = await axios.post('/api/login', { username, password });\r\n            return Promise.resolve({ data });\r\n        }\r\n    } catch (error) {\r\n        return Promise.reject({ error: \"Password doesn't Match...!\" })\r\n    }\r\n}\r\n\r\n// update user function\r\nexport async function updateUser(response) {\r\n    try {\r\n\r\n        const token = await localStorage.getItem('token');\r\n        const data = await axios.put('/api/updateuser', response, { headers: { \"Authorization\" : `Beare ${token}` }});\r\n        return Promise.resolve({ data });\r\n\r\n    } catch (error) {\r\n        return Promise.reject({ error: \"Couldn't Update Profile...!\"})\r\n    }\r\n}\r\n\r\n// generate OTP\r\nexport async function generateOTP(username) {\r\n    try {\r\n\r\n        const { data : { code }, status } = await axios.get('/api/generateOTP', { params : { username }});\r\n\r\n        // send mail with the OTP\r\n        if (status === 201) {\r\n            let { data : { email } } = await getUser({ username });\r\n            let text = `Your Password Recovery OTP is ${code}. Verify and recovery password.`;\r\n            await axios.post('/api/registerMail', { username, userEmail : email, text, subject : \"Password Recovery OTP\" });\r\n        }\r\n\r\n        return Promise.resolve(code);\r\n\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\n// verify OTP\r\nexport async function verifyOTP({ username, code }) {\r\n    try {\r\n        const { data, status } = await axios.get('/api/verifyOTP', { params : { username, code }})\r\n        return { data, status }\r\n    } catch (error) {\r\n        return Promise.reject(error);\r\n    }\r\n}\r\n\r\n// reset password\r\nexport async function resetPassword({ username, password }) {\r\n    try {\r\n        const { data, status } = await axios.put('/api/resetPassword', { username, password });\r\n        return Promise.resolve({ data, status })\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}