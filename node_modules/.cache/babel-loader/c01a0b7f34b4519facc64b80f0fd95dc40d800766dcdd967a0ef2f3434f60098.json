{"ast":null,"code":"import toast from 'react-hot-toast';\n\n// validate login page username\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n  if (values.username) {\n    // check user exist or not\n  }\n  return errors;\n}\n\n// validate password\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n// validate reset password\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_pwd) {\n    errors.exist = toast.error('Password not match...!');\n  }\n  return errors;\n}\n;\n\n// validate register form\nexport async function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\n\n// validate profile page\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}\n\n// validate password\nfunction passwordVerify() {\n  let errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  const specialChars = /['!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    errors.password = toast.error('Password Required...!');\n  } else if (values.password.includes(' ')) {\n    errors.password = toast.error('Wrong Password...!');\n  } else if (values.password.length < 4) {\n    errors.password = toast.error('Password must be more than 4 characters long!');\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error('Password must have special character!');\n  }\n  return errors;\n}\n\n// validate username\nfunction usernameVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.username) {\n    error.username = toast.error(\"Username Required...!\");\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Invalid Username...!\");\n  }\n  return error;\n}\n\n// validate email\nfunction emailVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.email) {\n    error.email = toast.error('Email Required...!');\n  } else if (values.email.includes(' ')) {\n    error.email = toast.error('Wrong Email...!');\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    error.email = toast.error('Invalid Email address...!');\n  }\n  return error;\n}","map":{"version":3,"names":["toast","usernameValidate","values","errors","usernameVerify","username","passwordValidate","passwordVerify","resetPasswordValidation","password","confirm_pwd","exist","error","registerValidation","emailVerify","profileValidation","specialChars","includes","length","test","email"],"sources":["D:/09 Programming/02 Trayning/08 Backend/login_react_app/client/src/helper/validate.js"],"sourcesContent":["import toast from 'react-hot-toast';\r\n\r\n// validate login page username\r\nexport async function usernameValidate(values) {\r\n    const errors = usernameVerify({}, values);\r\n\r\n    if (values.username) {\r\n        // check user exist or not\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n// validate password\r\nexport async function passwordValidate(values) {\r\n    const errors = passwordVerify({}, values);\r\n\r\n    return errors;\r\n}\r\n\r\n// validate reset password\r\nexport async function resetPasswordValidation(values) {\r\n    const errors = passwordVerify({}, values);\r\n\r\n    if (values.password !== values.confirm_pwd) {\r\n        errors.exist = toast.error('Password not match...!')\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n// validate register form\r\nexport async function registerValidation(values) {\r\n    const errors = usernameVerify({}, values);\r\n    passwordVerify(errors, values);\r\n    emailVerify(errors, values);\r\n\r\n    return errors;\r\n}\r\n\r\n// validate profile page\r\nexport async function profileValidation(values) {\r\n    const errors = emailVerify({}, values);\r\n\r\n    return errors;\r\n}\r\n\r\n// validate password\r\nfunction passwordVerify(errors = {}, values) {\r\n\r\n    const specialChars = /['!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n\r\n    if (!values.password) {\r\n        errors.password = toast.error('Password Required...!');\r\n    } else if (values.password.includes(' ')) {\r\n        errors.password = toast.error('Wrong Password...!');\r\n    } else if (values.password.length < 4) {\r\n        errors.password = toast.error('Password must be more than 4 characters long!');\r\n    } else if (!specialChars.test(values.password)) {\r\n        errors.password = toast.error('Password must have special character!');\r\n    }\r\n\r\n    return errors\r\n}\r\n\r\n// validate username\r\nfunction usernameVerify(error = {}, values){\r\n    if (!values.username) {\r\n        error.username = toast.error(\"Username Required...!\");\r\n    } else if (values.username.includes(\" \")) {\r\n        error.username = toast.error(\"Invalid Username...!\");\r\n    }\r\n\r\n    return error\r\n}\r\n\r\n// validate email\r\nfunction emailVerify(error = {}, values) {\r\n    if (!values.email) {\r\n        error.email = toast.error('Email Required...!')\r\n    } else if (values.email.includes(' ')) {\r\n        error.email = toast.error('Wrong Email...!')\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        error.email = toast.error('Invalid Email address...!')\r\n    }\r\n\r\n    return error;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}